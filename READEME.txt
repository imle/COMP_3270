Steven Imle
ski0005@auburn.edu


### Files

info
 |- pseudocode.txt
 |- specification.pdf
 |- strategies.md

src
 |- strat_1
 |   |- Strat1.cpp
 |   \- Strat1.h
 |- strat_2
 |   |- Strat2.cpp
 |   \- Strat2.h
 |- strat_3
 |   |- Strat3.cpp
 |   \- Strat3.h
 |- AbstractStrategy.h
 |- ArgParser.cpp
 |- ArgParser.h
 |- err_codes.cpp
 |- err_codes.h
 |- FileHandler.cpp
 |- FileHandler.h
 |- Logger.cpp
 |- Logger.h
 |- StrategyTester.cpp
 |- StrategyTester.h
 |- ValueGenerator.cpp
 \- ValueGenerator.h



### Compilation
The source code for this project was developed in CLion 2016.3 EAP.
The project can be compiled by typing `make` in the root directory.

The `*.md` files within the project may be more easily viewed using one
of the two following links if your editor does not have markdown support.

* http://dillinger.io/
* https://jbt.github.io/markdown-editor/



Time Complexity Calculations
The work done to calculate the final T(n) values is included in a scanned pdf
under the name `./documents/calculations.pdf`



### Ranking
* Strategy 3
* Strategy 2
* Strategy 1

These algorithms were developed in the order they are numbered but ended up becoming more
efficient per each new strategy.

Strategy 3 is clearly the least efficient as indicated by the graph but also because no
matter what it will always test every possible combination of numbers regardless of whether
the number it starts or ends on is negative.

Strategy 2's worst case shows that while it is not always more efficient than strategy 3,
it will generally be an order of magnitude faster than it with larger sets of numbers as
long as there is a relatively unskewed distribution of numbers.

Strategy 1 is far and above the winner. Since it runs in linear time.


### Other

NO-PLAGIARISM CERTIFICATION: I certify that I wrote the code I am submitting. I did not copy whole or parts of it
from another student or have another person write the code for me. Any code I am reusing in my program is clearly
marked as such with its source clearly identified in comments.