algorithm-1 (A: Array [1 ... n] of integer)
1       smallest := nil
2       ind_l := nil
3       ind_r := nil
4       current := 0
5       for i := 1 to (n-1)
6           for j := i to (n-1)
7               for k := i to j
8                   current := current + A[k]
9               if smallest = nil or smallest > current
10                  smallest := current
11                  ind_l := i
12                  ind_r := j
13              current := 0
14      return (smallest, ind_l, ind_r)



algorithm-2 (A: Array [1 ... n] of integer)
1       negatives := []
2       m = 0
3       for i := 1 to (n-1)
4           if A[i] < 0
5               negatives.append(i)
6               m = m + 1
7       smallest := nil
8       ind_l := nil
9       ind_r := nil
10      current := 0
11      for i := 1 to (m-1)
12          for j := i to (m-1)
13              for k := negatives[i] to negatives[j]
14                  current := current + A[k]
15              if smallest = nil or smallest > current
16                  smallest := current
17                  ind_l := i
18                  ind_r := j
19              current := 0
20      return (smallest, ind_l, ind_r)



algorithm-3 (A: Array [l ... r] of integer)
1       smallest_ending_here := 0
2       ind_l_ending_here := nil
3       ind_r_ending_here := nil
4       smallest := 0
5       ind_l := nil
6       ind_r := nil
7       has_negative := false
8       for i := 1 to (n-1)
9           if A[i] < 0
10              has_negative := true
11              break
12          if A[i] < smallest
13              smallest := A[i]
14              ind_l := i
15              ind_r := i
16      if !has_negative
17          return (smallest, ind_l, ind_r)
18      for i := 1 to (n-1)
19          smallest_ending_here = smallest_ending_here + A[i]
20          if smallest_ending_here > 0
21              smallest_ending_here = 0
22              ind_l_ending_here = i + 1
23              ind_r_ending_here = ind_l_ending_here
24          if smallest > smallest_ending_here
25              smallest := smallest_ending_here
26              ind_l := ind_l_ending_here
27              ind_r := i
28          if smallest > A[i]
29              smallest := A[i]
30      return (smallest, ind_l, ind_r)